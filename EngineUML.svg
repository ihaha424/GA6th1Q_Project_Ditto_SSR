<svg viewBox="0 0 1400 1000" xmlns="http://www.w3.org/2000/svg">
  <!-- 스타일 정의 -->
  <defs>
    <style>
      .class-box { fill: #f0f8ff; stroke: #2c3e50; stroke-width: 2; }
      .component-box { fill: #fff5ee; stroke: #d35400; stroke-width: 2; }
      .manager-box { fill: #f0fff0; stroke: #27ae60; stroke-width: 2; }
      .scene-box { fill: #ffefd5; stroke: #8b4513; stroke-width: 2; }
      .title { font-size: 14px; font-weight: bold; fill: #2c3e50; }
      .method { font-size: 12px; fill: #34495e; }
      .arrow { stroke: #34495e; stroke-width: 2; fill: none; }
      .arrow-dashed { stroke: #7f8c8d; stroke-width: 2; fill: none; stroke-dasharray: 5,5; }
      .note { fill: #fffacd; stroke: #f39c12; stroke-width: 1; }
      .note-text { font-size: 11px; fill: #2c3e50; }
    </style>
    <!-- 화살표 머리 정의 -->
    <marker id="arrowhead" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#34495e"/>
    </marker>
    <marker id="arrowhead-dashed" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#7f8c8d"/>
    </marker>
  </defs>

  <!-- WinApp -->
  <rect class="class-box" x="50" y="50" width="200" height="120" rx="5"/>
  <text class="title" x="150" y="75" text-anchor="middle">WinApp</text>
  <line x1="50" y1="85" x2="250" y2="85" stroke="#2c3e50"/>
  <text class="method" x="60" y="105">+ Initialize()</text>
  <text class="method" x="60" y="125">+ Run()</text>
  <text class="method" x="60" y="145">+ WndProc()</text>
  <text class="method" x="60" y="165">+ Finalize()</text>

  <!-- GameManager (Singleton) -->
  <rect class="manager-box" x="350" y="50" width="250" height="180" rx="5"/>
  <text class="title" x="475" y="75" text-anchor="middle">GameManager (Singleton)</text>
  <line x1="350" y1="85" x2="600" y2="85" stroke="#27ae60"/>
  <text class="method" x="360" y="105">+ Initialize()</text>
  <text class="method" x="360" y="125">+ Run() ← Main Loop</text>
  <text class="method" x="360" y="145">+ Update(deltaTime)</text>
  <text class="method" x="360" y="165">+ FixedUpdate()</text>
  <text class="method" x="360" y="185">+ Render()</text>
  <text class="method" x="360" y="205">+ Finalize()</text>
  <text class="method" x="360" y="225">- m_Time: GameTime</text>

  <!-- GameTime -->
  <rect class="class-box" x="700" y="50" width="200" height="140" rx="5"/>
  <text class="title" x="800" y="75" text-anchor="middle">GameTime</text>
  <line x1="700" y1="85" x2="900" y2="85" stroke="#2c3e50"/>
  <text class="method" x="710" y="105">+ InitTime()</text>
  <text class="method" x="710" y="125">+ UpdateTime()</text>
  <text class="method" x="710" y="145">+ GetDeltaTime()</text>
  <text class="method" x="710" y="165">+ GetTimeScale()</text>
  <text class="method" x="710" y="185">- deltaTime: float</text>

  <!-- SceneManager -->
  <rect class="manager-box" x="350" y="280" width="250" height="140" rx="5"/>
  <text class="title" x="475" y="305" text-anchor="middle">SceneManager (Singleton)</text>
  <line x1="350" y1="315" x2="600" y2="315" stroke="#27ae60"/>
  <text class="method" x="360" y="335">+ LoadScene()</text>
  <text class="method" x="360" y="355">+ ChangeScene()</text>
  <text class="method" x="360" y="375">+ GetActiveScene()</text>
  <text class="method" x="360" y="395">- m_pCurScene: SceneBase*</text>
  <text class="method" x="360" y="415">- m_mSceneList: map</text>

  <!-- SceneBase -->
  <rect class="scene-box" x="700" y="280" width="250" height="200" rx="5"/>
  <text class="title" x="825" y="305" text-anchor="middle">SceneBase</text>
  <line x1="700" y1="315" x2="950" y2="315" stroke="#8b4513"/>
  <text class="method" x="710" y="335">+ Initialize()</text>
  <text class="method" x="710" y="355">+ Enter()</text>
  <text class="method" x="710" y="375">+ Update(deltaTime)</text>
  <text class="method" x="710" y="395">+ FixedUpdate(fixedDeltaTime)</text>
  <text class="method" x="710" y="415">+ Render()</text>
  <text class="method" x="710" y="435">+ Exit()</text>
  <text class="method" x="710" y="455">+ Finalize()</text>
  <text class="method" x="710" y="475">- m_ObjectManager</text>

  <!-- ObjectManager -->
  <rect class="manager-box" x="50" y="530" width="250" height="160" rx="5"/>
  <text class="title" x="175" y="555" text-anchor="middle">ObjectManager</text>
  <line x1="50" y1="565" x2="300" y2="565" stroke="#27ae60"/>
  <text class="method" x="60" y="585">+ AddObject()</text>
  <text class="method" x="60" y="605">+ RemoveObject()</text>
  <text class="method" x="60" y="625">+ Update(deltaTime)</text>
  <text class="method" x="60" y="645">+ FixedUpdate(fixedDeltaTime)</text>
  <text class="method" x="60" y="665">+ Render()</text>
  <text class="method" x="60" y="685">- m_ObjectList[]</text>

  <!-- GameObject -->
  <rect class="class-box" x="350" y="530" width="250" height="180" rx="5"/>
  <text class="title" x="475" y="555" text-anchor="middle">GameObject</text>
  <line x1="350" y1="565" x2="600" y2="565" stroke="#2c3e50"/>
  <text class="method" x="360" y="585">+ Update(deltaTime)</text>
  <text class="method" x="360" y="605">+ FixedUpdate(fixedDeltaTime)</text>
  <text class="method" x="360" y="625">+ Render()</text>
  <text class="method" x="360" y="645">+ CreateComponent&lt;T&gt;()</text>
  <text class="method" x="360" y="665">+ GetComponent()</text>
  <text class="method" x="360" y="685">- m_Components: vector</text>
  <text class="method" x="360" y="705">- m_Transform: Transform</text>

  <!-- Component -->
  <rect class="component-box" x="700" y="530" width="250" height="140" rx="5"/>
  <text class="title" x="825" y="555" text-anchor="middle">Component (Abstract)</text>
  <line x1="700" y1="565" x2="950" y2="565" stroke="#d35400"/>
  <text class="method" x="710" y="585">+ virtual Update(deltaTime)</text>
  <text class="method" x="710" y="605">+ virtual FixedUpdate(fixedDeltaTime)</text>
  <text class="method" x="710" y="625">+ virtual Render()</text>
  <text class="method" x="710" y="645">+ virtual Start()</text>
  <text class="method" x="710" y="665"># m_pOwner: GameObject*</text>

  <!-- ColliderManager -->
  <rect class="manager-box" x="1050" y="280" width="250" height="140" rx="5"/>
  <text class="title" x="1175" y="305" text-anchor="middle">ColliderManager</text>
  <line x1="1050" y1="315" x2="1300" y2="315" stroke="#27ae60"/>
  <text class="method" x="1060" y="335">+ AddCollider()</text>
  <text class="method" x="1060" y="355">+ FixedUpdate()</text>
  <text class="method" x="1060" y="375">+ CheckCollision()</text>
  <text class="method" x="1060" y="395">+ ResetGroup()</text>
  <text class="method" x="1060" y="415">- m_ColliderList[]</text>

  <!-- GameRender -->
  <rect class="manager-box" x="1050" y="50" width="250" height="160" rx="5"/>
  <text class="title" x="1175" y="75" text-anchor="middle">GameRender (Singleton)</text>
  <line x1="1050" y1="85" x2="1300" y2="85" stroke="#27ae60"/>
  <text class="method" x="1060" y="105">+ InitRender()</text>
  <text class="method" x="1060" y="125">+ BeginDraw()</text>
  <text class="method" x="1060" y="145">+ EndDraw()</text>
  <text class="method" x="1060" y="165">+ DrawTexture()</text>
  <text class="method" x="1060" y="185">+ DrawAnimation()</text>
  <text class="method" x="1060" y="205">- m_hDC: HDC</text>

  <!-- ResourceManager -->
  <rect class="manager-box" x="1050" y="530" width="250" height="160" rx="5"/>
  <text class="title" x="1175" y="555" text-anchor="middle">ResourceManager (Singleton)</text>
  <line x1="1050" y1="565" x2="1300" y2="565" stroke="#27ae60"/>
  <text class="method" x="1060" y="585">+ LoadTexture()</text>
  <text class="method" x="1060" y="605">+ LoadAnimation()</text>
  <text class="method" x="1060" y="625">+ LoadMusic()</text>
  <text class="method" x="1060" y="645">+ PlayMusic()</text>
  <text class="method" x="1060" y="665">- m_mTexture: map</text>
  <text class="method" x="1060" y="685">- m_mAnim: map</text>

  <!-- 연결선들 -->
  <!-- WinApp -> GameManager -->
  <path class="arrow" d="M 250 110 L 350 110" marker-end="url(#arrowhead)"/>
  
  <!-- GameManager -> GameTime -->
  <path class="arrow" d="M 600 120 L 700 120" marker-end="url(#arrowhead)"/>
  
  <!-- GameManager -> SceneManager -->
  <path class="arrow" d="M 475 230 L 475 280" marker-end="url(#arrowhead)"/>
  
  <!-- SceneManager -> SceneBase -->
  <path class="arrow" d="M 600 350 L 700 350" marker-end="url(#arrowhead)"/>
  
  <!-- SceneBase -> ObjectManager -->
  <path class="arrow-dashed" d="M 700 380 L 175 380 L 175 530" marker-end="url(#arrowhead-dashed)"/>
  
  <!-- ObjectManager -> GameObject -->
  <path class="arrow" d="M 300 610 L 350 610" marker-end="url(#arrowhead)"/>
  
  <!-- GameObject -> Component -->
  <path class="arrow" d="M 600 620 L 700 600" marker-end="url(#arrowhead)"/>
  
  <!-- SceneBase -> ColliderManager -->
  <path class="arrow-dashed" d="M 950 380 L 1050 350" marker-end="url(#arrowhead-dashed)"/>
  
  <!-- GameManager -> GameRender -->
  <path class="arrow" d="M 600 130 L 1050 130" marker-end="url(#arrowhead)"/>

  <!-- 메인 게임 루프 노트 -->
  <rect class="note" x="50" y="750" width="1250" height="200" rx="5"/>
  <text class="title" x="675" y="775" text-anchor="middle">Main Game Loop Flow</text>
  <text class="note-text" x="70" y="800">1. WinApp::Run() 호출</text>
  <text class="note-text" x="70" y="820">2. GameManager::Run() 진입 → while(running) 루프 시작</text>
  <text class="note-text" x="70" y="840">3. GameTime::UpdateTime() → deltaTime 계산</text>
  <text class="note-text" x="70" y="860">4. Fixed Update: 고정 프레임레이트(60fps)로 물리/로직 업데이트</text>
  <text class="note-text" x="90" y="880">   - SceneBase::FixedUpdate() → ObjectManager::FixedUpdate() → GameObject::FixedUpdate() → Component::FixedUpdate()</text>
  <text class="note-text" x="90" y="900">   - ColliderManager::FixedUpdate() → 충돌 검사 및 처리</text>
  <text class="note-text" x="70" y="920">5. Update: 가변 프레임레이트로 일반 업데이트 (deltaTime 사용)</text>
  <text class="note-text" x="90" y="940">   - SceneBase::Update() → ObjectManager::Update() → GameObject::Update() → Component::Update()</text>
  
  <!-- 추가 설명 -->
  <text class="note-text" x="700" y="800">6. Render: 화면 렌더링</text>
  <text class="note-text" x="720" y="820">   - GameRender::BeginDraw()</text>
  <text class="note-text" x="720" y="840">   - SceneBase::Render() → ObjectManager::Render()</text>
  <text class="note-text" x="720" y="860">   - GameObject::Render() → Component::Render()</text>
  <text class="note-text" x="720" y="880">   - GameRender::EndDraw()</text>
  <text class="note-text" x="700" y="900">7. Windows 메시지 처리</text>
  <text class="note-text" x="700" y="920">8. 루프 반복 또는 종료</text>
</svg>
